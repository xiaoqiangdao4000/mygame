{"version":3,"sources":["file:///Users/zzx/Desktop/mygame/assets/scripts/mjNode.ts"],"names":["_decorator","Component","instantiate","Intersection2D","Prefab","Rect","resources","SpriteAtlas","ccclass","property","mjNode","mjSpriteAtlas","refreshLock","items","itemcount","curItem","start","initMj","update","deltaTime","load","err","atlas","i","randomInt","getRandomInt","createMj","refreshState","num","spriteFrame","getSpriteFrame","mj","mycard_prefab","parent","node","mjscrpit","getComponent","interaction","push","length","itemsXJ","j","refreshStateMJ","console","log","big","k","mjscrpit1","getSiblingIndex","node1","node2","pos1","getPosition","pos2","rect1","x","y","rect2","mjscrpit2","rectRect","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import { _decorator, BoxCollider2D, Collider, Component, EventTouch, Input, input, instantiate, Intersection2D, Node, NodeEventType, Prefab, Rect, resources, Sprite, SpriteAtlas, SpriteFrame, Texture2D, UITransform } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('mjNode')\nexport class mjNode extends Component {\n\n    @property(Prefab)\n    mycard_prefab: Prefab | null = null;\n\n    mjSpriteAtlas: SpriteAtlas = null;\n\n    refreshLock = false;\n    items = [];\n    itemcount = 20;     //初始化图片总数量 20*3\n    curItem = 0;        //当前加载图片数量\n\n    start() {\n        this.initMj();\n    }\n\n    update(deltaTime: number) {\n\n    }\n\n    initMj() {\n        resources.load(\"wzmj_card\", SpriteAtlas, (err, atlas) => {\n            this.mjSpriteAtlas = atlas;\n            for (let i = 0; i < this.itemcount; i++) {\n                var randomInt = this.getRandomInt(1, 37);\n                this.createMj(randomInt);\n                this.createMj(randomInt);\n                this.createMj(randomInt);\n            }\n\n            this.refreshState();\n        });\n    }\n\n    //随机创建麻将\n    //pos = 0;\n    createMj(num) {\n        let randomInt = num;\n        if (randomInt == 10 || randomInt == 20 || randomInt == 30) randomInt += 1;\n        const spriteFrame = this.mjSpriteAtlas.getSpriteFrame('s_wzmj_' + randomInt);\n        let mj = instantiate(this.mycard_prefab);\n        mj.parent = this.node;\n        var mjscrpit = mj.getComponent(\"mjcard\");\n        mjscrpit.initMj(randomInt, 1, spriteFrame);\n        mjscrpit.interaction = true;\n        // mj.setPosition(0, this.pos);\n\n        // this.pos += 121;\n\n        // for (let i = 0; i < this.items.length; i++) {\n        //     this.refreshState(mj, this.items[i]);\n        // }\n        this.items.push(mj);\n    }\n\n    //刷新麻将状态\n    refreshState() {\n\n        for (let i = 0; i < this.items.length; i++) {\n            let itemsXJ = [];\n            itemsXJ.push(this.items[i]);\n            for (let j = 0; j < this.items.length; j++) {\n                if (this.items[i] != this.items[j]) {\n                    if (this.refreshStateMJ(this.items[i], this.items[j])) {\n                        itemsXJ.push(this.items[j]);\n                    }\n                }\n            }\n            console.log('yyyy = ', itemsXJ);\n            var big = 0;\n            if (itemsXJ.length > 1) {\n                for (let k = 0; k < itemsXJ.length; k++) {\n                    var mjscrpit1 = itemsXJ[k].getComponent(\"mjcard\");\n                    mjscrpit1.interaction = false;\n                    if (itemsXJ[k].getSiblingIndex() > big) {\n                        big = itemsXJ[k].getSiblingIndex();\n                        mjscrpit1.interaction = true;\n                    }\n                    else {\n                        mjscrpit1.interaction = false;\n                    }\n                }\n            }\n\n            // if (big > 0) {\n            //     var mjscrpit1 = itemsXJ[big].getComponent(\"mjcard\");\n            //     mjscrpit1.interaction = true;\n            // }\n\n        }\n    }\n\n    refreshStateMJ(node1: Node, node2: Node) {\n        // 获取两个节点的边界框的世界坐标位置和大小\n        let pos1 = node1.getPosition();\n        //let size1 = node1.getComponent(UITransform).contentSize;\n        let pos2 = node2.getPosition();\n        //let size2 = node2.getComponent(UITransform).contentSize;\n\n        // 创建一个临时的矩形对象，用于检测相交\n        let rect1 = new Rect(pos1.x, pos1.y, 90, 120);\n        let rect2 = new Rect(pos2.x, pos2.y, 90, 120);\n\n        var mjscrpit1 = node1.getComponent(\"mjcard\");\n        var mjscrpit2 = node2.getComponent(\"mjcard\");\n\n        // 判断是否相交\n        if (Intersection2D.rectRect(rect1, rect2)) {\n            console.log(\"两个图片相交\");\n            return true;\n        }\n\n        return false;\n    }\n\n\n\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n}\n\n"]}