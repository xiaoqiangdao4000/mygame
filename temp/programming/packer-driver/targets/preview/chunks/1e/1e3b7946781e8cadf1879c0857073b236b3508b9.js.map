{"version":3,"sources":["file:///Users/zzx/Desktop/mygame/assets/scripts/mjNode.ts"],"names":["_decorator","Component","instantiate","Intersection2D","Prefab","Rect","SpriteAtlas","tween","ccclass","property","mjNode","refreshLock","items","curitem","randomIndex","level","allitem","start","initMj","update","deltaTime","getRandomMjIndex","node","delay","i","call","createMj","refresh","console","log","spriteFrame","mjSpriteAtlas","getSpriteFrame","mj","mycard_prefab","parent","mjscrpit","getComponent","push","self","refreshState","length","itemsXJ","j","refreshStateMJ","big","k","mjscrpit1","interaction","getSiblingIndex","node1","node2","pos1","getPosition","pos2","rect1","x","y","rect2","rectRect","getRandomInt","min","max","Math","floor","random","randomInt"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAqCC,MAAAA,S,OAAAA,S;AAA6DC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,c,OAAAA,c;AAAqCC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,I,OAAAA,I;AAAyBC,MAAAA,W,OAAAA,W;AAAqCC,MAAAA,K,OAAAA,K;;;;;;;;;OAC7N;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;;wBAGjBU,M,WADZF,OAAO,CAAC,QAAD,C,UAGHC,QAAQ,CAACL,MAAD,C,UAGRK,QAAQ,CAACH,WAAD,C,2BANb,MACaI,MADb,SAC4BT,SAD5B,CACsC;AAAA;AAAA;;AAAA;;AAAA;;AAAA,eAQlCU,WARkC,GAQpB,KARoB;AAAA,eASlCC,KATkC,GAS1B,EAT0B;AAAA,eAUlCC,OAVkC,GAUxB,CAVwB;AAUd;AAVc,eAWlCC,WAXkC,GAWpB,CAXoB;AAWd;AAXc,eAYlCC,KAZkC,GAY1B,CAZ0B;AAYd;AAZc,eAalCC,OAbkC,GAaxB,KAAKD,KAAL,GAAa,EAbW;AAAA;;AAaA;AAGlCE,QAAAA,KAAK,GAAG;AACJ,eAAKC,MAAL;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEDF,QAAAA,MAAM,GAAG;AAAA;;AACL,eAAKJ,WAAL,GAAmB,KAAKO,gBAAL,CAAsB,CAAtB,EAAyB,EAAzB,CAAnB;;AADK,wCAEkC;AACnCd,YAAAA,KAAK,CAAC,KAAI,CAACe,IAAN,CAAL,CACKC,KADL,CACWC,CAAC,GAAG,GADf,EAEKC,IAFL,CAEU,MAAM;AAAED,cAAAA,CAAC,IAAI,KAAI,CAACR,OAAL,GAAe,CAApB,GAAwB,KAAI,CAACU,QAAL,CAAc,IAAd,CAAxB,GAA8C,KAAI,CAACA,QAAL,CAAc,KAAd,CAA9C;AAAqE,aAFvF,EAGKT,KAHL;AAIH,WAPI;;AAEL,eAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,OAAzB,EAAkCQ,CAAC,EAAnC;AAAA;AAAA;AAMH,SAhCiC,CAkClC;;;AACAE,QAAAA,QAAQ,CAACC,OAAD,EAAU;AACd;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB,KAAKhB,OAAxB;AACA,cAAI,KAAKA,OAAL,GAAe,CAAf,IAAoB,CAAxB,EAA2B,KAAKC,WAAL,GAAmB,KAAKO,gBAAL,CAAsB,CAAtB,EAAyB,EAAzB,CAAnB;AAC3B,cAAMS,WAAW,GAAG,KAAKC,aAAL,CAAmBC,cAAnB,CAAkC,YAAY,KAAKlB,WAAnD,CAApB;AACA,cAAImB,EAAE,GAAG/B,WAAW,CAAC,KAAKgC,aAAN,CAApB;AACAD,UAAAA,EAAE,CAACE,MAAH,GAAY,KAAKb,IAAjB;AACA,cAAIc,QAAQ,GAAGH,EAAE,CAACI,YAAH,CAAgB,QAAhB,CAAf;AACA,eAAKzB,KAAL,CAAW0B,IAAX,CAAgBL,EAAhB;AACA,cAAIM,IAAI,GAAG,IAAX;AACAH,UAAAA,QAAQ,CAAClB,MAAT,CAAgB,KAAKJ,WAArB,EAAkCgB,WAAlC,EAA+C,KAAKf,KAApD,EAA2D,YAAY;AACnE,gBAAIY,OAAJ,EAAa;AACTY,cAAAA,IAAI,CAACC,YAAL;AACAZ,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBU,IAAI,CAAC1B,OAA1B;AACAe,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,WAND;AAOA,eAAKhB,OAAL,IAAgB,CAAhB;AACH,SArDiC,CAuDlC;;;AACA2B,QAAAA,YAAY,GAAG;AACX,eAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,KAAL,CAAW6B,MAA/B,EAAuCjB,CAAC,EAAxC,EAA4C;AACxC,gBAAIkB,OAAO,GAAG,EAAd;AACAA,YAAAA,OAAO,CAACJ,IAAR,CAAa,KAAK1B,KAAL,CAAWY,CAAX,CAAb;;AACA,iBAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/B,KAAL,CAAW6B,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;AACxC,kBAAI,KAAK/B,KAAL,CAAWY,CAAX,KAAiB,KAAKZ,KAAL,CAAW+B,CAAX,CAArB,EAAoC;AAChC,oBAAI,KAAKC,cAAL,CAAoB,KAAKhC,KAAL,CAAWY,CAAX,CAApB,EAAmC,KAAKZ,KAAL,CAAW+B,CAAX,CAAnC,CAAJ,EAAuD;AACnDD,kBAAAA,OAAO,CAACJ,IAAR,CAAa,KAAK1B,KAAL,CAAW+B,CAAX,CAAb;AACH;AACJ;AACJ;;AACD,gBAAIE,GAAG,GAAG,CAAV;;AACA,gBAAIH,OAAO,CAACD,MAAR,GAAiB,CAArB,EAAwB;AACpB,mBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACD,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACrC,oBAAIC,SAAS,GAAGL,OAAO,CAACI,CAAD,CAAP,CAAWT,YAAX,CAAwB,QAAxB,CAAhB;AACAU,gBAAAA,SAAS,CAACC,WAAV,GAAwB,KAAxB;;AACA,oBAAIN,OAAO,CAACI,CAAD,CAAP,CAAWG,eAAX,KAA+BJ,GAAnC,EAAwC;AACpCA,kBAAAA,GAAG,GAAGH,OAAO,CAACI,CAAD,CAAP,CAAWG,eAAX,EAAN;AACAF,kBAAAA,SAAS,CAACC,WAAV,GAAwB,IAAxB;AACH,iBAHD,MAIK;AACDD,kBAAAA,SAAS,CAACC,WAAV,GAAwB,KAAxB;AACH;AACJ;AACJ;AACJ;AACJ;;AAEDJ,QAAAA,cAAc,CAACM,KAAD,EAAcC,KAAd,EAA2B;AACrC;AACA,cAAIC,IAAI,GAAGF,KAAK,CAACG,WAAN,EAAX;AACA,cAAIC,IAAI,GAAGH,KAAK,CAACE,WAAN,EAAX,CAHqC,CAIrC;AACA;AACA;;AACA,cAAIE,KAAK,GAAG,IAAIlD,IAAJ,CAAS+C,IAAI,CAACI,CAAd,EAAiBJ,IAAI,CAACK,CAAtB,EAAyB,EAAzB,EAA6B,GAA7B,CAAZ;AACA,cAAIC,KAAK,GAAG,IAAIrD,IAAJ,CAASiD,IAAI,CAACE,CAAd,EAAiBF,IAAI,CAACG,CAAtB,EAAyB,EAAzB,EAA6B,GAA7B,CAAZ,CARqC,CASrC;;AACA,cAAItD,cAAc,CAACwD,QAAf,CAAwBJ,KAAxB,EAA+BG,KAA/B,CAAJ,EAA2C;AACvC;AACA,mBAAO,IAAP;AACH;;AACD,iBAAO,KAAP;AACH;;AAEDE,QAAAA,YAAY,CAACC,GAAD,EAAMC,GAAN,EAAW;AACnB,iBAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH;;AACDxC,QAAAA,gBAAgB,CAACwC,GAAD,EAAMC,GAAN,EAAW;AACvB,cAAII,SAAS,GAAG,KAAKN,YAAL,CAAkB,CAAlB,EAAqB,EAArB,CAAhB;AACA,cAAIM,SAAS,IAAI,EAAb,IAAmBA,SAAS,IAAI,EAAhC,IAAsCA,SAAS,IAAI,EAAvD,EAA2DA,SAAS,IAAI,CAAb;AAC3D,iBAAOA,SAAP;AACH;;AA5GiC,O;;;;;iBAGH,I;;;;;;;iBAGF,I","sourcesContent":["import { _decorator, BoxCollider2D, Collider, Component, ConfigurableConstraint, EventTouch, Input, input, instantiate, Intersection2D, Node, NodeEventType, Prefab, Rect, resources, Sprite, SpriteAtlas, SpriteFrame, Texture2D, tween, UITransform, Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('mjNode')\nexport class mjNode extends Component {\n\n    @property(Prefab)\n    mycard_prefab: Prefab | null = null;\n\n    @property(SpriteAtlas)\n    mjSpriteAtlas: SpriteAtlas = null;\n\n    refreshLock = false;\n    items = [];\n    curitem = 0;        //当前数量\n    randomIndex = 0;    //当前随机牌索引\n    level = 2;          //当前关卡\n    allitem = this.level * 30;        //初始化图片总数量 20*3\n\n\n    start() {\n        this.initMj();\n    }\n\n    update(deltaTime: number) {\n\n    }\n\n    initMj() {\n        this.randomIndex = this.getRandomMjIndex(1, 37);\n        for (let i = 0; i < this.allitem; i++) {\n            tween(this.node)\n                .delay(i * 0.1)\n                .call(() => { i == this.allitem - 1 ? this.createMj(true) : this.createMj(false); })\n                .start()\n        }\n    }\n\n    //随机创建麻将\n    createMj(refresh) {\n        //发牌\n        console.log('发牌：', this.curitem);\n        if (this.curitem % 3 == 0) this.randomIndex = this.getRandomMjIndex(1, 37);\n        const spriteFrame = this.mjSpriteAtlas.getSpriteFrame('s_wzmj_' + this.randomIndex);\n        let mj = instantiate(this.mycard_prefab);\n        mj.parent = this.node;\n        var mjscrpit = mj.getComponent(\"mjcard\");\n        this.items.push(mj);\n        var self = this;\n        mjscrpit.initMj(this.randomIndex, spriteFrame, this.level, function () {\n            if (refresh) {\n                self.refreshState();\n                console.log('发牌完毕：', self.curitem);\n                console.log('刷新牌！！！');\n            }\n        });\n        this.curitem += 1;\n    }\n\n    //刷新麻将状态\n    refreshState() {\n        for (let i = 0; i < this.items.length; i++) {\n            let itemsXJ = [];\n            itemsXJ.push(this.items[i]);\n            for (let j = 0; j < this.items.length; j++) {\n                if (this.items[i] != this.items[j]) {\n                    if (this.refreshStateMJ(this.items[i], this.items[j])) {\n                        itemsXJ.push(this.items[j]);\n                    }\n                }\n            }\n            var big = 0;\n            if (itemsXJ.length > 1) {\n                for (let k = 0; k < itemsXJ.length; k++) {\n                    var mjscrpit1 = itemsXJ[k].getComponent(\"mjcard\");\n                    mjscrpit1.interaction = false;\n                    if (itemsXJ[k].getSiblingIndex() > big) {\n                        big = itemsXJ[k].getSiblingIndex();\n                        mjscrpit1.interaction = true;\n                    }\n                    else {\n                        mjscrpit1.interaction = false;\n                    }\n                }\n            }\n        }\n    }\n\n    refreshStateMJ(node1: Node, node2: Node) {\n        // 获取两个节点的边界框的世界坐标位置和大小\n        let pos1 = node1.getPosition();\n        let pos2 = node2.getPosition();\n        // 创建一个临时的矩形对象，用于检测相交\n        // let rect1 = new Rect(pos1.x, pos1.y, 67, 91);\n        // let rect2 = new Rect(pos2.x, pos2.y, 67, 91);\n        let rect1 = new Rect(pos1.x, pos1.y, 90, 120);\n        let rect2 = new Rect(pos2.x, pos2.y, 90, 120);\n        // 判断是否相交\n        if (Intersection2D.rectRect(rect1, rect2)) {\n            //console.log(\"两个图片相交\");\n            return true;\n        }\n        return false;\n    }\n\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    getRandomMjIndex(min, max) {\n        var randomInt = this.getRandomInt(1, 37);\n        if (randomInt == 10 || randomInt == 20 || randomInt == 30) randomInt += 1;\n        return randomInt;\n    }\n}\n\n"]}